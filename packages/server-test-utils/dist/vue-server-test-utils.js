'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var testUtils = _interopDefault(require('@vue/test-utils'));
var Vue = _interopDefault(require('vue'));
var createInstance = _interopDefault(require('create-instance'));
var util = require('shared/util');
var vueServerRenderer = require('vue-server-renderer');
var mergeOptions = require('shared/merge-options');
var cheerio = _interopDefault(require('cheerio'));

var config = testUtils.config

// 

Vue.config.productionTip = false;
Vue.config.devtools = false;

function renderToString (
  component,
  options
) {
  if ( options === void 0 ) options = {};

  var renderer = vueServerRenderer.createRenderer();

  if (!renderer) {
    util.throwError(
      "renderToString must be run in node. It cannot be " + "run in a browser"
    );
  }
  // Remove cached constructor
  delete component._Ctor;

  if (options.attachToDocument) {
    util.throwError("you cannot use attachToDocument with " + "renderToString");
  }
  var vueConstructor = testUtils.createLocalVue(options.localVue);
  var vm = createInstance(
    component,
    mergeOptions.mergeOptions(options, config),
    vueConstructor
  );
  var renderedString = '';

  // $FlowIgnore
  renderer.renderToString(vm, function (err, res) {
    if (err) {
      console.log(err);
    }
    renderedString = res;
  });
  return renderedString
}

// 

function render (
  component,
  options
) {
  if ( options === void 0 ) options = {};

  var renderedString = renderToString(component, options);
  return cheerio.load('')(renderedString)
}

var index = {
  renderToString: renderToString,
  config: config,
  render: render
}

module.exports = index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnVlLXNlcnZlci10ZXN0LXV0aWxzLmpzIiwic291cmNlcyI6WyIuLi9zcmMvY29uZmlnLmpzIiwiLi4vc3JjL3JlbmRlclRvU3RyaW5nLmpzIiwiLi4vc3JjL3JlbmRlci5qcyIsIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdFV0aWxzIGZyb20gJ0B2dWUvdGVzdC11dGlscydcblxuZXhwb3J0IGRlZmF1bHQgdGVzdFV0aWxzLmNvbmZpZ1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG5pbXBvcnQgY3JlYXRlSW5zdGFuY2UgZnJvbSAnY3JlYXRlLWluc3RhbmNlJ1xuaW1wb3J0IHsgdGhyb3dFcnJvciB9IGZyb20gJ3NoYXJlZC91dGlsJ1xuaW1wb3J0IHsgY3JlYXRlUmVuZGVyZXIgfSBmcm9tICd2dWUtc2VydmVyLXJlbmRlcmVyJ1xuaW1wb3J0IHRlc3RVdGlscyBmcm9tICdAdnVlL3Rlc3QtdXRpbHMnXG5pbXBvcnQgeyBtZXJnZU9wdGlvbnMgfSBmcm9tICdzaGFyZWQvbWVyZ2Utb3B0aW9ucydcbmltcG9ydCBjb25maWcgZnJvbSAnLi9jb25maWcnXG5cblZ1ZS5jb25maWcucHJvZHVjdGlvblRpcCA9IGZhbHNlXG5WdWUuY29uZmlnLmRldnRvb2xzID0gZmFsc2VcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyVG9TdHJpbmcgKFxuICBjb21wb25lbnQ6IENvbXBvbmVudCxcbiAgb3B0aW9uczogT3B0aW9ucyA9IHt9XG4pOiBzdHJpbmcge1xuICBjb25zdCByZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKClcblxuICBpZiAoIXJlbmRlcmVyKSB7XG4gICAgdGhyb3dFcnJvcihcbiAgICAgIGByZW5kZXJUb1N0cmluZyBtdXN0IGJlIHJ1biBpbiBub2RlLiBJdCBjYW5ub3QgYmUgYCArIGBydW4gaW4gYSBicm93c2VyYFxuICAgIClcbiAgfVxuICAvLyBSZW1vdmUgY2FjaGVkIGNvbnN0cnVjdG9yXG4gIGRlbGV0ZSBjb21wb25lbnQuX0N0b3JcblxuICBpZiAob3B0aW9ucy5hdHRhY2hUb0RvY3VtZW50KSB7XG4gICAgdGhyb3dFcnJvcihgeW91IGNhbm5vdCB1c2UgYXR0YWNoVG9Eb2N1bWVudCB3aXRoIGAgKyBgcmVuZGVyVG9TdHJpbmdgKVxuICB9XG4gIGNvbnN0IHZ1ZUNvbnN0cnVjdG9yID0gdGVzdFV0aWxzLmNyZWF0ZUxvY2FsVnVlKG9wdGlvbnMubG9jYWxWdWUpXG4gIGNvbnN0IHZtID0gY3JlYXRlSW5zdGFuY2UoXG4gICAgY29tcG9uZW50LFxuICAgIG1lcmdlT3B0aW9ucyhvcHRpb25zLCBjb25maWcpLFxuICAgIHZ1ZUNvbnN0cnVjdG9yXG4gIClcbiAgbGV0IHJlbmRlcmVkU3RyaW5nID0gJydcblxuICAvLyAkRmxvd0lnbm9yZVxuICByZW5kZXJlci5yZW5kZXJUb1N0cmluZyh2bSwgKGVyciwgcmVzKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgIH1cbiAgICByZW5kZXJlZFN0cmluZyA9IHJlc1xuICB9KVxuICByZXR1cm4gcmVuZGVyZWRTdHJpbmdcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCByZW5kZXJUb1N0cmluZyBmcm9tICcuL3JlbmRlclRvU3RyaW5nJ1xuaW1wb3J0IGNoZWVyaW8gZnJvbSAnY2hlZXJpbydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyIChcbiAgY29tcG9uZW50OiBDb21wb25lbnQsXG4gIG9wdGlvbnM6IE9wdGlvbnMgPSB7fVxuKTogc3RyaW5nIHtcbiAgY29uc3QgcmVuZGVyZWRTdHJpbmcgPSByZW5kZXJUb1N0cmluZyhjb21wb25lbnQsIG9wdGlvbnMpXG4gIHJldHVybiBjaGVlcmlvLmxvYWQoJycpKHJlbmRlcmVkU3RyaW5nKVxufVxuIiwiaW1wb3J0IHJlbmRlclRvU3RyaW5nIGZyb20gJy4vcmVuZGVyVG9TdHJpbmcnXG5pbXBvcnQgcmVuZGVyIGZyb20gJy4vcmVuZGVyJ1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZydcblxuZXhwb3J0IGRlZmF1bHQge1xuICByZW5kZXJUb1N0cmluZyxcbiAgY29uZmlnLFxuICByZW5kZXJcbn1cbiJdLCJuYW1lcyI6WyJjb25zdCIsImNyZWF0ZVJlbmRlcmVyIiwidGhyb3dFcnJvciIsIm1lcmdlT3B0aW9ucyIsImxldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRUEsYUFBZSxTQUFTLENBQUMsTUFBTTs7QUNGL0I7O0FBVUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsTUFBSztBQUNoQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxNQUFLOztBQUUzQixBQUFlLFNBQVMsY0FBYztFQUNwQyxTQUFTO0VBQ1QsT0FBcUI7RUFDYjttQ0FERCxHQUFZOztFQUVuQkEsSUFBTSxRQUFRLEdBQUdDLGdDQUFjLEdBQUU7O0VBRWpDLElBQUksQ0FBQyxRQUFRLEVBQUU7SUFDYkMsZUFBVTtNQUNSLG1EQUFtRCxHQUFHLGtCQUFrQjtNQUN6RTtHQUNGOztFQUVELE9BQU8sU0FBUyxDQUFDLE1BQUs7O0VBRXRCLElBQUksT0FBTyxDQUFDLGdCQUFnQixFQUFFO0lBQzVCQSxlQUFVLENBQUMsdUNBQXVDLEdBQUcsZ0JBQWdCLEVBQUM7R0FDdkU7RUFDREYsSUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFDO0VBQ2pFQSxJQUFNLEVBQUUsR0FBRyxjQUFjO0lBQ3ZCLFNBQVM7SUFDVEcseUJBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO0lBQzdCLGNBQWM7SUFDZjtFQUNEQyxJQUFJLGNBQWMsR0FBRyxHQUFFOzs7RUFHdkIsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLFlBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRTtJQUNyQyxJQUFJLEdBQUcsRUFBRTtNQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFDO0tBQ2pCO0lBQ0QsY0FBYyxHQUFHLElBQUc7R0FDckIsRUFBQztFQUNGLE9BQU8sY0FBYztDQUN0Qjs7QUM5Q0Q7O0FBS0EsQUFBZSxTQUFTLE1BQU07RUFDNUIsU0FBUztFQUNULE9BQXFCO0VBQ2I7bUNBREQsR0FBWTs7RUFFbkJKLElBQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFDO0VBQ3pELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUM7Q0FDeEM7O0FDUEQsWUFBZTtrQkFDYixjQUFjO1VBQ2QsTUFBTTtVQUNOLE1BQU07Q0FDUDs7OzsifQ==
